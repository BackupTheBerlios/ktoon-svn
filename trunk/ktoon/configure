#/bin/bash

. scripts/global

CONFIGURE_TEST_DIR=configure.tests
FAIL=-1
SUCC=0
CONFIG_H=config.h

DLIB_CONFIG=src/dlib/dlibconfig.pri

CONFIG_LOG=$(pwd)/$LOG_FILE
PARAMETERS=""
INSTALL_DIR=${KTOON_HOME}
QT_MODULES='core xml'
QT_CONFIG='warn_on release'

# $1 parameter is a text
# $2 directory 
# $3 INCLUDE PATH
# $4 LIBS
function check()
{
	RESULT="yes."
	if [ -d $CONFIGURE_TEST_DIR/$2 ]
	then
		cd $CONFIGURE_TEST_DIR/$2
		
		${MAKE} clean 2> /dev/null > /dev/null
		$QMAKE  2>> $CONFIG_LOG >> $CONFIG_LOG
		

		
		if [ "$3" != "" -a "$4" != "" ]
		then
			${MAKE} INCPATH="${3}" LIBS="${4}" 2>>$CONFIG_LOG >>$CONFIG_LOG || RESULT="no."
		else
			${MAKE} 2>>$CONFIG_LOG >>$CONFIG_LOG || RESULT="no." 
		fi

		cd - 2>> /dev/null >> /dev/null
	else
		RESULT="no."
	fi
	
	qpinfo "Checking for $1... $RESULT" -n
	
	if [ ${RESULT} != "yes." ]
	then
		return $FAIL
	fi
	
	return $SUCC
}

function defineMacro()
{
	echo "#define $*" >> $CONFIG_H
}

function defineDLibConf()
{
	echo $* >> $DLIB_CONFIG
#	for var in ${*}
#	do
#		echo ${var} >> $DLIB_CONFIG
#	done
}


function pkgconfigInclude() 
{
	INCPATH=''
	for inc in $(pkg-config ${1} --cflags --silence-errors)
	do
		case $inc in
			-I*) INCPATH="${INCPATH} $(echo $inc | sed 's/-I//g')" ;;
			-p*) ;;
			-D*) ;;
		esac
	done
	
	echo $INCPATH
}

function updateMakefiles()
{
	qpinfo "Updating makefiles"
	
	${QMAKE} ${PARAMETERS} -recursive 2> /dev/null >/dev/null
	
	INSTALL_DIR_STRIP=$(echo ${INSTALL_DIR} | sed 's/\//\\\//g')
	for mkfile in `find . -iname "Makefile*"`
	do
		sed -i "s/\$(INSTALL_ROOT)/${INSTALL_DIR_STRIP}/g" $mkfile
	done
}

function usage()
{
	echo "Use $0 [options]"
	echo
	echo "Options: "
	echo "		-p,--prefix [PATH]	Installs KToon on PATH"
	echo "		-k,--enable-ktoonstyle	Enables KToonStyle"
	echo "		--enable-kinas 		Enable KINAS"
	echo "          --enable-opengl         Enables opengl support"
	echo
	exit 0;
}

echo "/* Generated automatically by configure script */" > $CONFIG_H 
echo "#ifndef CONFIG_H" >> $CONFIG_H
echo "#define CONFIG_H" >> $CONFIG_H

TEMP=`getopt -o pkh:: --long prefix,help,enable-ktoonstyle,enable-kinas,enable-opengl,release,debug,debug-and-release:: -n "$0" -- "$@"`

eval set -- "$TEMP"
while [ true ]
do
        case "$1" in
		-h|--help) usage; shift;;
		-k|--enable-ktoonstyle) defineMacro ENABLE_KTOONSTYLE; shift ;;
		--enable-kinas) defineMacro ENABLE_KINAS; shift ;;
		-p|--prefix) INSTALL_DIR=$3; shift 3 ;;
		--enable-opengl) QT_MODULES="$QT_MODULES opengl"; shift;;
		--release) QT_CONFIG="$QT_CONFIG release -debug"; shift;;
		--debug) QT_CONFIG="$QT_CONFIG debug -release"; shift;;
		--debug-and-release) QT_CONFIG="$QT_CONFIG debug_and_release"; shift ;;
		--) shift ; break ;;
		*) QT_CONFIG="$QT_CONFIG release"; 
		break ;;
	esac
done

detectQtVersion

ln -fs $(pwd)/$CONFIG_H $(pwd)/src/libktoon/$CONFIG_H

LIBS=''
INCPATH='.'


echo > $DLIB_CONFIG

check "qt" qt || exit


# Checking aspell
check "aspell" aspell && defineDLibConf "LIBS += -laspell" && defineDLibConf  "DEFINES += HAVE_ASPELL"


# Checking gstreamer
export GST_LIBS=`pkg-config gstreamer-0.10 --libs --silence-errors`
export GST_INCLUDE=`pkg-config gstreamer-0.10 --cflags --silence-errors`
check "sound" sound "${GST_INCLUDE}" "${GST_LIBS}" && defineMacro HAVE_SOUND && defineDLibConf "LIBS += ${GST_LIBS}" && defineDLibConf "QMAKE_CXXFLAGS_RELEASE += ${GST_INCLUDE}" && defineDLibConf "DEFINES += HAVE_GST10" 

# Checking gif
check "gif" gif && LIBS="$LIBS -lgif" && defineMacro HAVE_LIBGIF

# checking ffmpeg
check "ffmpeg 0.4.9" ffmpeg && LIBS="$LIBS -lavcodec -lavformat" && defineMacro HAVE_FFMPEG


# Checking ming

if [ -x "`which ming-config`" ]
then
	export MING_LIBS=`ming-config --libs`
	export MING_INCLUDE=`ming-config --cflags`
fi

check "ming" ming "${MING_INCLUDE}" "${MING_LIBS}" && LIBS="$LIBS ${MING_LIBS}" && defineMacro HAVE_MING



### end checking ###


###################################### KTCONFIG.pri ############################################

if [ "$LIBS" != '' ]
then
	echo "LIBS += $LIBS" > $KT_CONFIG
else
	echo > $KT_CONFIG
fi

echo "INCLUDEPATH += $INCPATH" >> $KT_CONFIG

echo "QT += $QT_MODULES" >> $KT_CONFIG
echo "CONFIG += $QT_CONFIG" >> $KT_CONFIG

cat << __EOF__ >> $KT_CONFIG
unix {
MOC_DIR = .moc 
UI_DIR = .ui 
OBJECTS_DIR = .obj
}
__EOF__

defineMacro VERSION ${APPVER}
defineMacro VERSION_STR \"${APPVER}\"

echo "#endif" >> $CONFIG_H

################################################################################################

updateMakefiles

# write config status

echo "export KTOON_HOME=${INSTALL_DIR}" > ${CONFIG_STATUS}
# echo "export " >> ${CONFIG_STATUS}

echo
echo "********************************************************************************"
qpwarn "$APPNAME is configured, if you want to clean configuration, type 'make -f Makefile.common confclean'"
qpwarn "Just run 'make' and 'make install'."
qpwarn "KToon will be installed in '${INSTALL_DIR}'"
echo "********************************************************************************"
echo




